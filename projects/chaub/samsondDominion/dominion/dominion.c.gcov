        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 15744645 returned 100% blocks executed 100%
 15744645:    8:int compare(const void* a, const void* b) {
 15744645:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
  8051562:   10:    return 1;
  7693083:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
  6165253:   12:    return -1;
  1527830:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 9506879 returned 100% blocks executed 100%
  9506879:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  9506879:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  9506879:  209:  if (state->deckCount[player] < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  9486745:  210:    return -1;
    20134:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  2635282:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2595014:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  2595014:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2595014:  217:    newDeckPos++;
116527113:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
113932099:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2595014:  221:    state->deckCount[player]--;
        -:  222:  }
  2615148:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2595014:  224:    state->deck[player][i] = newDeck[i];
  2595014:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    20134:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 11353 returned 100% blocks executed 100%
    11353:  320:int supplyCount(int card, struct gameState *state) {
    11353:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 150015 returned 100% blocks executed 100%
   150015:  346:int whoseTurn(struct gameState *state) {
   150015:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 9638194 returned 100% blocks executed 100%
  9638194:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  9638194:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  7348604:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 35%
branch  1 taken 65% (fallthrough)
  2594854:  534:      state->deck[player][i] = state->discard[player][i];
  2594854:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
  4753750:  538:    state->deckCount[player] = state->discardCount[player];
  4753750:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
  4753750:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
  4753750:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
  4753750:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
  4753750:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
  4753750:  559:    if (deckCounter == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  4733632:  560:      return -1;
        -:  561:
    20118:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    20118:  563:    state->deckCount[player]--;
    20118:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  4884444:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  4884444:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  4884444:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  4884444:  576:    state->deckCount[player]--;
  4884444:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  4904562:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 200004 returned 100% blocks executed 97%
   200004:  583:int getCost(int cardNumber)
        -:  584:{
   200004:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
     7372:  588:      return 0;
        -:  589:    case estate:
     7256:  590:      return 2;
        -:  591:    case duchy:
     7202:  592:      return 5;
        -:  593:    case province:
     7368:  594:      return 8;
        -:  595:    case copper:
     7258:  596:      return 0;
        -:  597:    case silver:
     7592:  598:      return 3;
        -:  599:    case gold:
     7504:  600:      return 6;
        -:  601:    case adventurer:
     7424:  602:      return 6;
        -:  603:    case council_room:
     7510:  604:      return 5;
        -:  605:    case feast:
     7480:  606:      return 4;
        -:  607:    case gardens:
     7524:  608:      return 4;
        -:  609:    case mine:
     7454:  610:      return 5;
        -:  611:    case remodel:
     7474:  612:      return 4;
        -:  613:    case smithy:
     7332:  614:      return 4;
        -:  615:    case village:
     7386:  616:      return 3;
        -:  617:    case baron:
     7474:  618:      return 4;
        -:  619:    case great_hall:
     7384:  620:      return 3;
        -:  621:    case minion:
     7184:  622:      return 5;
        -:  623:    case steward:
     7420:  624:      return 3;
        -:  625:    case tribute:
     7308:  626:      return 5;
        -:  627:    case ambassador:
     7386:  628:      return 3;
        -:  629:    case cutpurse:
     7392:  630:      return 4;
        -:  631:    case embargo: 
     7540:  632:      return 2;
        -:  633:    case outpost:
     7462:  634:      return 5;
        -:  635:    case salvager:
     7552:  636:      return 4;
        -:  637:    case sea_hag:
     7370:  638:      return 4;
        -:  639:    case treasure_map:
     7396:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyCardEffect called 6 returned 100% blocks executed 100%
        6:  646:int smithyCardEffect(struct gameState *state, int handPos, int currentPlayer)
        -:  647:{
        -:  648:   // +3 Cards
       24:  649:   for (int i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  650:	{
       18:  651:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  652:	}
        -:  653:			
        -:  654:   // discard card from hand
        6:  655:   discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -:  656:   
        6:  657:   return 0;
        -:  658:}
        -:  659:
function adventurerCardEffect called 50005 returned 100% blocks executed 93%
    50005:  660:int adventurerCardEffect(struct gameState *state, int *temphand, int currentPlayer)
        -:  661:{
    50005:  662:   int drawntreasure = 0;
        -:  663:   int cardDrawn;
    50005:  664:   int z = 0; // this is the counter for the temp hand
        -:  665: 
  9438281:  666:   while (drawntreasure < 2)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  667:   {
  9338271:  668:	   if (state->deckCount[currentPlayer] < 1)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:  669:      { 
        -:  670:         // if the deck is empty we need to shuffle discard and add to deck
  4753113:  671:	      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  672:	   }
        -:  673:	
  9338271:  674:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  675:	   
  9338271:  676:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        -:  677:	
  9338271:  678:      if (cardDrawn == copper || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  679:      {
   100010:  680:         drawntreasure++;
        -:  681:      }
        -:  682:	   else
        -:  683:      {
  9238261:  684:	      temphand[z] = cardDrawn;
  9238261:  685:	      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  686:	   }   
        -:  687:   }
        -:  688:
   100010:  689:   while (z - 1 >= 0)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  690:   {
    #####:  691:	   state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  692:	   z = z - 1;
        -:  693:   }
        -:  694:
    50005:  695:   return 0;
        -:  696:}
        -:  697:
function villageCardEffect called 0 returned 0% blocks executed 0%
    #####:  698:int villageCardEffect(struct gameState *state, int handPos, int currentPlayer)
        -:  699:{
        -:  700:   // +1 Card
    #####:  701:   drawCard(currentPlayer, state);
call    0 never executed
        -:  702:			
        -:  703:   // +2 Actions
    #####:  704:   state->numActions = state->numActions + 2;
        -:  705:			
        -:  706:   // discard played card from hand
    #####:  707:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  708:
    #####:  709:   return 0;
        -:  710:}
        -:  711:
function stewardCardEffect called 0 returned 0% blocks executed 0%
    #####:  712:int stewardCardEffect(int choice1, int choice2, int choice3, struct gameState *state, int handPos, int currentPlayer)
        -:  713:{
    #####:  714:   if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  715:	{
        -:  716:	  // +2 cards
    #####:  717:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  718:	}
    #####:  719:   else if (choice1 == 3)
branch  0 never executed
branch  1 never executed
        -:  720:	{
        -:  721:	  // +2 coins
    #####:  722:	  state->coins = state->coins + 2;
        -:  723:	}
        -:  724:   else
        -:  725:	{
        -:  726:	  // trash 2 cards in hand
    #####:  727:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  728:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  729:	}
        -:  730:		
        -:  731:   // discard card from hand
    #####:  732:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  733:   
    #####:  734:   return 0;
        -:  735:}
        -:  736:
function embargoCardEffect called 0 returned 0% blocks executed 0%
    #####:  737:int embargoCardEffect(int choice1, struct gameState *state, int handPos, int currentPlayer)
        -:  738:{
        -:  739:   // +2 Coins
    #####:  740:   state->coins = state->coins + 2;
        -:  741:			
        -:  742:   // see if selected pile is in play
    #####:  743:   if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	   return -1;
        -:  746:	}
        -:  747:			
        -:  748:   // add embargo token to selected supply pile
    #####:  749:   state->embargoTokens[choice1]--;
        -:  750:			
        -:  751:   // trash card
    #####:  752:   discardCard(handPos, currentPlayer, state, 0);		
call    0 never executed
        -:  753:      
    #####:  754:   return 0;
        -:  755:}
        -:  756:
function cardEffect called 150015 returned 100% blocks executed 14%
   150015:  757:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  758:{
        -:  759:  int i;
        -:  760:  int j;
        -:  761:  int k;
        -:  762:  int x;
        -:  763:  int index;
   150015:  764:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   150015:  765:  int nextPlayer = currentPlayer + 1;
        -:  766:
   150015:  767:  int tributeRevealedCards[2] = {-1, -1};
        -:  768:  int temphand[MAX_HAND];// moved above the if statement
   150015:  769:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    54166:  770:    nextPlayer = 0;
        -:  771:  }
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
   150015:  774:  switch( card ) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 33%
branch  6 taken 1%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  775:    {
        -:  776:    case adventurer:
    50005:  777:       return adventurerCardEffect(state, temphand, currentPlayer);
call    0 returned 100%
        -:  778:			
        -:  779:    case council_room:
        -:  780:      //+4 Cards
   250010:  781:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  782:	{
   200008:  783:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  784:	}
        -:  785:			
        -:  786:      //+1 Buy
    50002:  787:      state->numBuys++;
        -:  788:			
        -:  789:      //Each other player draws a card
   199858:  790:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  791:	{
   149856:  792:	  if ( i != currentPlayer )
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  793:	    {
    99854:  794:	      drawCard(i, state);
call    0 returned 100%
        -:  795:	    }
        -:  796:	}
        -:  797:			
        -:  798:      //put played card in played card pile
    50002:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  800:			
    50002:  801:      return 0;
        -:  802:			
        -:  803:    case feast:
        -:  804:      //gain card with cost up to 5
        -:  805:      //Backup hand
    #####:  806:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  807:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  808:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  809:      }
        -:  810:      //Backup hand
        -:  811:
        -:  812:      //Update Coins for Buy
    #####:  813:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  814:      x = 1;//Condition to loop on
    #####:  815:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  816:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  817:	  if (DEBUG)
        -:  818:	    printf("None of that card left, sorry!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  822:	  }
        -:  823:	}
    #####:  824:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  826:
        -:  827:	  if (DEBUG){
        -:  828:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  829:	  }
        -:  830:	}
        -:  831:	else{
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
    #####:  837:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  838:	  x = 0;//No more buying cards
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
        -:  844:	}
        -:  845:      }     
        -:  846:
        -:  847:      //Reset Hand
    #####:  848:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  849:	state->hand[currentPlayer][i] = temphand[i];
    #####:  850:	temphand[i] = -1;
        -:  851:      }
        -:  852:      //Reset Hand
        -:  853:      			
    #####:  854:      return 0;
        -:  855:			
        -:  856:    case gardens:
    #####:  857:      return -1;
        -:  858:			
        -:  859:    case mine:
    #####:  860:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  861:
    #####:  862:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  863:	{
    #####:  864:	  return -1;
        -:  865:	}
        -:  866:		
    #####:  867:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  884:	{
    #####:  885:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  888:	      break;
        -:  889:	    }
        -:  890:	}
        -:  891:			
    #####:  892:      return 0;
        -:  893:			
        -:  894:    case remodel:
    50002:  895:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    50002:  897:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
        -:  898:	{
    38653:  899:	  return -1;
        -:  900:	}
        -:  901:
    11349:  902:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  903:
        -:  904:      //discard card from hand
    11349:  905:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  906:
        -:  907:      //discard trashed card
   248591:  908:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  909:	{
   248591:  910:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  911:	    {
    11349:  912:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
    11349:  913:	      break;
        -:  914:	    }
        -:  915:	}
        -:  916:
        -:  917:
    11349:  918:      return 0;
        -:  919:		
        -:  920:    case smithy:
        6:  921:       return smithyCardEffect(state, handPos, currentPlayer);
call    0 returned 100%
        -:  922:		
        -:  923:    case village:
    #####:  924:       return villageCardEffect(state, handPos, currentPlayer);
call    0 never executed
        -:  925:		
        -:  926:    case baron:
    #####:  927:      state->numBuys++;//Increase buys by 1!
    #####:  928:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  929:	int p = 0;//Iterator for hand!
    #####:  930:	int card_not_discarded = 1;//Flag for discard set!
    #####:  931:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  932:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  933:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  934:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  935:	    state->discardCount[currentPlayer]++;
    #####:  936:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  937:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  938:	    }
    #####:  939:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  940:	    state->handCount[currentPlayer]--;
    #####:  941:	    card_not_discarded = 0;//Exit the loop
        -:  942:	  }
    #####:  943:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  944:	    if(DEBUG) {
        -:  945:	      printf("No estate cards in your hand, invalid choice\n");
        -:  946:	      printf("Must gain an estate if there are any\n");
        -:  947:	    }
    #####:  948:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  949:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  950:	      state->supplyCount[estate]--;//Decrement estates
    #####:  951:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  952:		isGameOver(state);
call    0 never executed
        -:  953:	      }
        -:  954:	    }
    #####:  955:	    card_not_discarded = 0;//Exit the loop
        -:  956:	  }
        -:  957:			    
        -:  958:	  else{
    #####:  959:	    p++;//Next card
        -:  960:	  }
        -:  961:	}
        -:  962:      }
        -:  963:			    
        -:  964:      else{
    #####:  965:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  966:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  967:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  968:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  969:	    isGameOver(state);
call    0 never executed
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      
    #####:  975:      return 0;
        -:  976:		
        -:  977:    case great_hall:
        -:  978:      //+1 Card
    #####:  979:      drawCard(currentPlayer, state);
call    0 never executed
        -:  980:			
        -:  981:      //+1 Actions
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case minion:
        -:  989:      //+1 action
    #####:  990:      state->numActions++;
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  994:			
    #####:  995:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  996:	{
    #####:  997:	  state->coins = state->coins + 2;
        -:  998:	}
        -:  999:			
    #####: 1000:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1001:	{
        -: 1002:	  //discard hand
    #####: 1003:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1004:	    {
    #####: 1005:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1006:	    }
        -: 1007:				
        -: 1008:	  //draw 4
    #####: 1009:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1012:	    }
        -: 1013:				
        -: 1014:	  //other players discard hand and redraw if hand size > 4
    #####: 1015:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1016:	    {
    #####: 1017:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1018:		{
    #####: 1019:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1020:		    {
        -: 1021:		      //discard hand
    #####: 1022:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1023:			{
    #####: 1024:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1025:			}
        -: 1026:							
        -: 1027:		      //draw 4
    #####: 1028:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1029:			{
    #####: 1030:			  drawCard(i, state);
call    0 never executed
        -: 1031:			}
        -: 1032:		    }
        -: 1033:		}
        -: 1034:	    }
        -: 1035:				
        -: 1036:	}
    #####: 1037:      return 0;
        -: 1038:		
        -: 1039:    case steward:
    #####: 1040:       return stewardCardEffect(choice1, choice2, choice3, state, handPos, currentPlayer);
call    0 never executed
        -: 1041:		
        -: 1042:    case tribute:
    #####: 1043:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1044:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1045:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	  state->deckCount[nextPlayer]--;
        -: 1047:	}
    #####: 1048:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1049:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1050:	  state->discardCount[nextPlayer]--;
        -: 1051:	}
        -: 1052:	else{
        -: 1053:	  //No Card to Reveal
        -: 1054:	  if (DEBUG){
        -: 1055:	    printf("No cards to reveal\n");
        -: 1056:	  }
        -: 1057:	}
        -: 1058:      }
        -: 1059:	    
        -: 1060:      else{
    #####: 1061:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1062:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1063:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1064:	    state->deckCount[nextPlayer]++;
    #####: 1065:	    state->discard[nextPlayer][i] = -1;
    #####: 1066:	    state->discardCount[nextPlayer]--;
        -: 1067:	  }
        -: 1068:			    
    #####: 1069:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1070:	} 
    #####: 1071:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1073:	state->deckCount[nextPlayer]--;
    #####: 1074:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
        -: 1077:      }    
        -: 1078:		       
    #####: 1079:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1080:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1081:	state->playedCardCount++;
    #####: 1082:	tributeRevealedCards[1] = -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1086:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1087:	  state->coins += 2;
        -: 1088:	}
        -: 1089:		    
    #####: 1090:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1091:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1092:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1093:	}
        -: 1094:	else{//Action Card
    #####: 1095:	  state->numActions = state->numActions + 2;
        -: 1096:	}
        -: 1097:      }
        -: 1098:	    
    #####: 1099:      return 0;
        -: 1100:		
        -: 1101:    case ambassador:
    #####: 1102:      j = 0;		//used to check if player has enough cards to discard
        -: 1103:
    #####: 1104:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1105:	{
    #####: 1106:	  return -1;				
        -: 1107:	}
        -: 1108:
    #####: 1109:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  return -1;
        -: 1112:	}
        -: 1113:
    #####: 1114:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1117:	    {
    #####: 1118:	      j++;
        -: 1119:	    }
        -: 1120:	}
    #####: 1121:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  return -1;				
        -: 1124:	}
        -: 1125:
        -: 1126:      if (DEBUG) 
        -: 1127:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1128:
        -: 1129:      //increase supply count for choosen card by amount being discarded
    #####: 1130:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1131:			
        -: 1132:      //each other player gains a copy of revealed card
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1136:	    {
    #####: 1137:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1138:	    }
        -: 1139:	}
        -: 1140:
        -: 1141:      //discard played card from hand
    #####: 1142:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1143:
        -: 1144:      //trash copies of cards returned to supply
    #####: 1145:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
    #####: 1147:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1150:		{
    #####: 1151:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1152:		  break;
        -: 1153:		}
        -: 1154:	    }
        -: 1155:	}			
        -: 1156:
    #####: 1157:      return 0;
        -: 1158:		
        -: 1159:    case cutpurse:
        -: 1160:
    #####: 1161:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1162:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1163:	{
    #####: 1164:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1165:	    {
    #####: 1166:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1167:		{
    #####: 1168:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1169:		    {
    #####: 1170:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1171:		      break;
        -: 1172:		    }
    #####: 1173:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1174:		    {
    #####: 1175:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1176:			{
        -: 1177:			  if (DEBUG)
        -: 1178:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1179:			}	
    #####: 1180:		      break;
        -: 1181:		    }		
        -: 1182:		}
        -: 1183:					
        -: 1184:	    }
        -: 1185:				
        -: 1186:	}				
        -: 1187:
        -: 1188:      //discard played card from hand
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1190:
    #####: 1191:      return 0;
        -: 1192:
        -: 1193:		
        -: 1194:    case embargo: 
    #####: 1195:       return embargoCardEffect(choice1, state, handPos, currentPlayer);
call    0 never executed
        -: 1196:		
        -: 1197:    case outpost:
        -: 1198:      //set outpost flag
    #####: 1199:      state->outpostPlayed++;
        -: 1200:			
        -: 1201:      //discard card
    #####: 1202:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case salvager:
        -: 1206:      //+1 buy
    #####: 1207:      state->numBuys++;
        -: 1208:			
    #####: 1209:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1210:	{
        -: 1211:	  //gain coins equal to trashed card
    #####: 1212:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1213:	  //trash card
    #####: 1214:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1215:	}
        -: 1216:			
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case sea_hag:
    #####: 1222:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1223:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1224:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1225:	  state->discardCount[i]++;
    #####: 1226:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1227:	}
        -: 1228:      }
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
function discardCard called 72713 returned 100% blocks executed 89%
    72713: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
    72713: 1269:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1270:    {
        -: 1271:      //add card to played pile
    72706: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    72706: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
    72713: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
    72713: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
      201: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
    72512: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
    72512: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
    72512: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
    72512: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
    72713: 1300:  return 0;
        -: 1301:}
        -: 1302:
function gainCard called 11353 returned 100% blocks executed 100%
    11353: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    11353: 1308:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1309:    {
        1: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    11352: 1318:  if (toFlag == 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1319:    {
        1: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1321:      state->deckCount[player]++;
        -: 1322:    }
    11351: 1323:  else if (toFlag == 2)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1324:    {
        1: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    11350: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    11350: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
    11352: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
    11352: 1337:  return 0;
        -: 1338:}
        -: 1339:
function updateCoins called 14 returned 100% blocks executed 100%
       14: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
       14: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       84: 1348:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1349:    {
       70: 1350:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1351:	{
       36: 1352:	  state->coins += 1;
        -: 1353:	}
       34: 1354:      else if (state->hand[player][i] == silver)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1355:	{
        4: 1356:	  state->coins += 2;
        -: 1357:	}
       30: 1358:      else if (state->hand[player][i] == gold)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -: 1359:	{
        4: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
       14: 1365:  state->coins += bonus;
        -: 1366:
       14: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
